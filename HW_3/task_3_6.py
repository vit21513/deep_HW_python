# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых
# частых.Не учитывать знаки препинания и регистр символов.За основу возьмите любую статью из
# википедии или из документации к языку.

text = '''В программировании рекурсия это вызов функции (процедуры) из неё же самой, непосредственно, (простая рекурсия) 
или через другие функции (сложная или косвенная рекурсия), например, функция A вызывает функцию B, а функция B — 
функцию Количество вложенных вызовов функции или процедуры называется глубиной рекурсии. Рекурсивная программа 
позволяет описать повторяющееся или даже потенциально бесконечное вычисление, причём без явных повторений частей 
программы и использования циклов. Структурно рекурсивная функция на верхнем уровне всегда представляет собой команду
ветвления (выбор одной из двух или более альтернатив в зависимости от условия (условий), которое в данном случае 
уместно назвать «условием прекращения рекурсии»), имеющую две или более альтернативные ветви, из которых хотя бы 
одна является рекурсивной и хотя бы одна — терминальной. Рекурсивная ветвь выполняется, когда условие прекращения
рекурсии ложно, и содержит хотя бы один рекурсивный вызов — прямой или опосредованный вызов функцией самой себя. 
Терминальная ветвь выполняется, когда условие прекращения рекурсии истинно; она возвращает некоторое значение,
не выполняя рекурсивного вызова. Правильно написанная рекурсивная функция должна гарантировать, что через конечное
число рекурсивных вызовов будет достигнуто выполнение условия прекращения рекурсии, в результате чего цепочка
последовательных рекурсивных вызовов прервётся и выполнится возврат.Помимо функций, выполняющих один рекурсивный
вызов в каждой рекурсивной ветви, бывают случаи «параллельной рекурсии», когда на одной рекурсивной ветви 
делается два или более рекурсивных вызова. Параллельная рекурсия типична при обработке сложных структур данных, 
таких как деревья. Простейший пример параллельно-рекурсивной функции — вычисление ряда Фибоначчи, где для 
получения значения n-го члена необходимо вычислить (n-1)-й и (n-2)-й.'''

VALUE_PRINT = 10
LEN_WORD = 1

help_list = text.replace('\n', '').split(" ")
set_uniq = set(help_list)
count_letter = 0
leter_list = []
leter_count = []
dict_result = dict()
for item in set_uniq:
    for letter in help_list:
        if letter == item and len(letter) != LEN_WORD:
            count_letter += 1
    dict_result[item] = count_letter
    count_letter = 0
sorted_dictionary = dict(sorted(dict_result.items(), key=lambda x: -x[1]))
while VALUE_PRINT > 0:
    for key, value in sorted_dictionary.items():
        if VALUE_PRINT == 0:
            break
        print(f' Cлово: "{key}"  Встречается {value} раз ')
        VALUE_PRINT -= 1

